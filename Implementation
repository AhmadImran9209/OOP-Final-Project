#include"Header.h"

void Menu()
{
	cout << "\n-----Menu-----\n";
	cout << "1) Add Players\n";
	cout << "2) Remove Player\n";
	cout << "3) Search PLayer\n";
	cout << "4) update Player\n";
	cout << "5) update captian\n";
	cout << "6) update coach\n";
	cout << "7) display team\n";
}

Player::Player()
{
	name = "";
	shirt_no = 0;
	average = 0;
	icc_rank = 0;
	total_runs = 0;
	matches_played = 0;
	total_wickets = 0;
}

void Player::setname(string name)
{
	this->name = name;
}
void Player::setshirt_no(int shirt_no)
{
	this->shirt_no = shirt_no;
}
void Player::setaverage(float average)
{
	this->average = average;
}
void Player::seticc_rank(int icc_rank)
{
	this->icc_rank = icc_rank;
}
void Player::settotal_runs(int total_runs)
{
	this->total_runs = total_runs;
}
void Player::setmathes_played(int mathes_played)
{
	this->matches_played = matches_played;
}
void Player::settotal_wickets(int total_wickets)
{
	this->total_wickets = total_wickets;
}

string Player::getname()
{
	return name;
}
int Player::getshirt_no()
{
	return shirt_no;
}
float Player::getaverage()
{
	return average;
}
int Player::geticc_rank()
{
	return icc_rank;
}
int Player::gettotal_runs()
{
	return total_runs;
}
int Player::getmatches_played()
{
	return matches_played;
}
int Player::gettotal_wickets()
{
	return total_wickets;
}

void Player::addPlayer()
{
	string name;
	int shirtno;
	cout << "Enter player name: ";
	cin >> name;
	setname(name);
	cout << "Enter Player Shirt number: ";
	cin >> shirtno;
	setshirt_no(shirtno);
}
void Player::removePlayer()
{

}
void Player::searchPlayer()
{

}
void Player::updatePlayer()
{

}

Player::~Player()
{

}


Team::Team()
{
	no_of_players = 0;
	total_matches_won = 0;
	total_matches_lost = 0;
	team_captain = "";
	team_coach = "";
	admin_username = "";
	admin_password = "";
}

void Team::setno_of_players(int no_of_players)
{
	this->no_of_players = no_of_players;
}
void Team::settotal_matches_won(int total_matches_won)
{
	this->total_matches_won = total_matches_won;
}
void Team::settotal_matches_lost(int total_matches_lost)
{
	this->total_matches_lost = total_matches_lost;
}
void Team::setteam_captain(string team_captain)
{
	this->team_captain = team_captain;
}
void Team::setteam_coach(string team_coach)
{
	this->team_coach = team_coach;
}
void Team::setadmin_username(string admin_username)
{
	this->admin_username = admin_username;
}
void Team::setadmin_password(string admin_password)
{
	this->admin_password = admin_password;
}

int Team::getno_of_players()
{
	return no_of_players;
}
int Team::gettotal_matches_won()
{
	return total_matches_won;
}
int Team::gettotal_matches_lost()
{
	return total_matches_lost;
}
string Team::getteam_captain()
{
	return team_captain;
}
string Team::getteam_coach()
{
	return team_coach;
}
string Team::getadmin_username()
{
	return admin_username;
}
string Team::getadmin_password()
{
	return admin_password;
}

void Team::displayMatches()
{

}
void Team::updateCaptain()
{

}
void Team::updateCoach()
{

}
void Team::displayTeam()
{

}

Team::~Team()
{

}



Match::Match()
{
	team1 = "";
	team2 = "";
	date = "";
	venue = "";
	match_type = "";
	tournament_name = "";
	commentators = "";
	umpires = "";
	match_status = "";
}

void Match::setteam1(string team1)
{
	this->team1 = team1;
}
void Match::setteam2(string team2)
{
	this->team2 = team2;
}
void Match::setdate(string date)
{
	this->date = date;
}
void Match::setvenue(string venue)
{
	this->venue = venue;
}
void Match::setmatch_type(string match_type)
{
	this->match_type = match_type;
}
void Match::settournament_name(string tournament_name)
{
	this->tournament_name = tournament_name;
}
void Match::setcommentators(string commentators)
{
	this->commentators = commentators;
}
void Match::setumpires(string umpires)
{
	this->umpires = umpires;
}
void Match::setmatch_status(string match_status)
{
	this->match_status = match_status;
}


void Match::setmost_runs(int most_runs)
{
	this->most_runs = most_runs;
}
void Match::sethighest_score(int highest_score)
{
	this->highest_score = highest_score;
}
void Match::setmost_sixes(int most_sixes)
{
	this->most_sixes = most_sixes;
}
void Match::setmost_fours(int most_fours)
{
	this->most_fours = most_fours;
}
void Match::setmost_centuries(int most_centuries)
{
	this->most_centuries = most_centuries;
}
void Match::sethighest_batting_average(int highest_batting_average)
{
	this->highest_batting_average = highest_batting_average;
}
void Match::setbest_batting_strike_rate(int best_batting_strike_rate)
{
	this->best_batting_strike_rate = best_batting_strike_rate;
}
void Match::setmost_wickets(int most_wickets)
{
	this->most_wickets = most_wickets;
}
void Match::setbest_bowling_avg(int best_bowling_avg)
{
	this->best_bowling_avg = best_bowling_avg;
}
void Match::setbest_bowling(int best_bowling)
{
	this->best_bowling = best_bowling;
}

int Match::getmost_runs()
{
	return most_runs;
}
int Match::gethighest_score()
{
	return highest_score;
}
int Match::getmost_sixes()
{
	return most_sixes;
}
int Match::getmost_fours()
{
	return most_fours;
}
int Match::getmost_centuries()
{
	return most_centuries;
}
int Match::gethighest_batting_average()
{
	return highest_batting_average;
}
int Match::getbest_batting_strike_rate()
{
	return best_batting_strike_rate;
}
int Match::getmost_wickets()
{
	return most_wickets;
}
int Match::getbest_bowling_avg()
{
	return best_bowling_avg;
}
int Match::getbest_bowling()
{
	return best_bowling;
}



string Match::getteam1()
{
	return team1;
}
string Match::getteam2()
{
	return team2;
}
string Match::getdate()
{
	return date;
}
string Match::getvenue()
{
	return venue;
}
string Match::getmatch_type()
{
	return match_type;
}
string Match::gettournament_name()
{
	return tournament_name;
}
string Match::getcommentators()
{
	return commentators;
}
string Match::getumpires()
{
	return umpires;
}
string Match::getmatch_status()
{
	return match_status;
}

void Match::conductMatch()
{
	int option;
	cout << "1) already sheduled match\n 2)Shedule a new match \n";
	cin >> option;
	if (option == 1)
	{
		displayUpcomingMatches();
	}
	else if (option == 2)
	{
		sheduleMatch();
	}
	updateWorldRecord();
}
void Match::sheduleMatch()
{
	int t1, t2;
	string date, ven, mt, tn, com, ump, ms;
	cout << "Available teams are: " << endl;
	cout << getteam1() << endl;
	cout << getteam2() << endl;
	cout << "Select Teams \n";
	cin >> t1, t2;
	cout << "Enter Time: ";
	cin >> date;
	setdate(date);
	cout << "Enter Venue: ";
	cin >> ven;
	setvenue(ven);
	cout << "Enter match type: ";
	cin >> mt;
	setmatch_type(mt);
	cout << "Enter Tournament name: ";
	cin >> tn;
	settournament_name(tn);
	cout << "Enter commentators: ";
	cin >> com;
	setcommentators(com);
	cout << "Enter umpires: ";
	cin >> ump;
	setumpires(ump);
	cout << "Enter match status: ";
	cin >> ms;
	setmatch_status(ms);
}
void Match::updateWorldRecord()
{
	setmost_runs(most_runs);
	sethighest_score(highest_score);
	setmost_sixes(most_sixes);
	setmost_fours(most_fours);
	setmost_centuries(most_centuries);
	sethighest_batting_average(highest_batting_average);
	setbest_batting_strike_rate(best_batting_strike_rate);
	setmost_wickets(most_wickets);
	setbest_bowling_avg(best_bowling_avg);
	setbest_bowling(best_bowling);
}
void Match::updateTeamRanking()
{

}
void Match::updatePlayerRanking()
{

}
void Match::displayUpcomingMatches()
{

}
void Match::displayRecentMatches()
{

}
